// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: business.proto

#ifndef PROTOBUF_business_2eproto__INCLUDED
#define PROTOBUF_business_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace com {
namespace relax {
namespace pb {
namespace business {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_business_2eproto();
void protobuf_AssignDesc_business_2eproto();
void protobuf_ShutdownFile_business_2eproto();

class LOGIN_RQ;

// ===================================================================

class LOGIN_RQ : public ::google::protobuf::Message {
 public:
  LOGIN_RQ();
  virtual ~LOGIN_RQ();

  LOGIN_RQ(const LOGIN_RQ& from);

  inline LOGIN_RQ& operator=(const LOGIN_RQ& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LOGIN_RQ& default_instance();

  void Swap(LOGIN_RQ* other);

  // implements Message ----------------------------------------------

  LOGIN_RQ* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LOGIN_RQ& from);
  void MergeFrom(const LOGIN_RQ& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .com.relax.pb.BASE_HEAD head = 1;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1;
  inline const ::com::relax::pb::BASE_HEAD& head() const;
  inline ::com::relax::pb::BASE_HEAD* mutable_head();
  inline ::com::relax::pb::BASE_HEAD* release_head();
  inline void set_allocated_head(::com::relax::pb::BASE_HEAD* head);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:com.relax.pb.business.LOGIN_RQ)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::com::relax::pb::BASE_HEAD* head_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_business_2eproto();
  friend void protobuf_AssignDesc_business_2eproto();
  friend void protobuf_ShutdownFile_business_2eproto();

  void InitAsDefaultInstance();
  static LOGIN_RQ* default_instance_;
};
// ===================================================================


// ===================================================================

// LOGIN_RQ

// required .com.relax.pb.BASE_HEAD head = 1;
inline bool LOGIN_RQ::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LOGIN_RQ::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LOGIN_RQ::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LOGIN_RQ::clear_head() {
  if (head_ != NULL) head_->::com::relax::pb::BASE_HEAD::Clear();
  clear_has_head();
}
inline const ::com::relax::pb::BASE_HEAD& LOGIN_RQ::head() const {
  // @@protoc_insertion_point(field_get:com.relax.pb.business.LOGIN_RQ.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::com::relax::pb::BASE_HEAD* LOGIN_RQ::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::com::relax::pb::BASE_HEAD;
  // @@protoc_insertion_point(field_mutable:com.relax.pb.business.LOGIN_RQ.head)
  return head_;
}
inline ::com::relax::pb::BASE_HEAD* LOGIN_RQ::release_head() {
  clear_has_head();
  ::com::relax::pb::BASE_HEAD* temp = head_;
  head_ = NULL;
  return temp;
}
inline void LOGIN_RQ::set_allocated_head(::com::relax::pb::BASE_HEAD* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:com.relax.pb.business.LOGIN_RQ.head)
}

// required string value = 2;
inline bool LOGIN_RQ::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LOGIN_RQ::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LOGIN_RQ::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LOGIN_RQ::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& LOGIN_RQ::value() const {
  // @@protoc_insertion_point(field_get:com.relax.pb.business.LOGIN_RQ.value)
  return *value_;
}
inline void LOGIN_RQ::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:com.relax.pb.business.LOGIN_RQ.value)
}
inline void LOGIN_RQ::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.relax.pb.business.LOGIN_RQ.value)
}
inline void LOGIN_RQ::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.relax.pb.business.LOGIN_RQ.value)
}
inline ::std::string* LOGIN_RQ::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.relax.pb.business.LOGIN_RQ.value)
  return value_;
}
inline ::std::string* LOGIN_RQ::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LOGIN_RQ::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.relax.pb.business.LOGIN_RQ.value)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace business
}  // namespace pb
}  // namespace relax
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_business_2eproto__INCLUDED
